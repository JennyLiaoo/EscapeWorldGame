#BlueJ class context
comment0.target=Sprite
comment0.text=\r\n\ This\ class\ represents\ a\ Sprite\ or\ animated\ character\ within\ a\ game.\ \ It\ incorporates\ the\ ability\r\n\ to\ handle\ movement,\ forces\ (acceleration,\ gravity)\ and\ resistance\ (wind\ resistance,\ friction).\r\n\ The\ Sprite\ must\ be\ displayed\ using\ an\ image\ from\ a\ file\ (BMP,\ PNG,\ JPEG,\ GIF).\ It\ can\ detect\r\n\ collisions\ with\ other\ Sprites\ and\ Shape\ objects.\r\n\r\n\ @author\:\ Adam\ Drenth\r\n\ @version\:\ 14.12.2021\r\n
comment1.params=imageFile\ width\ height
comment1.target=Sprite(java.lang.String,\ double,\ double)
comment10.params=pen
comment10.target=void\ draw(javafx.scene.canvas.GraphicsContext)
comment10.text=\r\n\ Draws\ the\ sprite\ on\ the\ canvas\r\n\ @param\ pen\ An\ object\ used\ to\ draw\ on\ the\ Canvas\r\n
comment11.params=force
comment11.target=void\ applyForce(PVector)
comment11.text=\r\n\ Applies\ a\ force\ the\ overall\ forces\ being\ applied.\ Once\ all\ the\ forces\ are\ applied,\ the\r\n\ overall\ force\ is\ set\ to\ a\ zero\ vector.\r\n\ @param\ force\ A\ PVector\ representing\ an\ additional\ force\ being\ applied\ to\ the\ Sprite\r\n
comment12.params=mu
comment12.target=void\ applyFriction(double)
comment12.text=\r\n\ Applies\ a\ force\ of\ friction\ the\ overall\ forces\ being\ applied.\ Once\ all\ the\ forces\ are\r\n\ applied,\ the\ overall\ force\ is\ set\ to\ a\ zero\ vector.\ The\ force\ is\ applied\ in\ the\ opposite\r\n\ direction\ of\ the\ current\ velocity.\r\n\ @param\ mu\ the\ friction\ coefficient\r\n
comment13.params=
comment13.target=void\ update()
comment13.text=\r\n\ Applies\ all\ the\ forces\ to\ the\ Sprite\ and\ updates\ its\ position.\ Afterwards\ all\ forces\ are\ set\r\n\ to\ zero.\r\n
comment14.params=xMin\ xMax\ yMin\ yMax
comment14.target=boolean\ update(double,\ double,\ double,\ double)
comment14.text=\r\n\ Applies\ all\ the\ forces\ to\ the\ Sprite\ and\ updates\ its\ position.\ Afterwards\ all\ forces\ are\ set\r\n\ to\ zero.\ However\ boundaries\ are\ passed\ in.\r\n\ @param\ xMin\ left-most\ boundary\r\n\ @param\ xMax\ right-most\ boundary\r\n\ @param\ yMin\ top-most\ boundary\r\n\ @param\ yMax\ bottom-most\ boundary\r\n\ @return\ true\ if\ one\ of\ the\ boundaries\ are\ hit\r\n
comment15.params=xMin\ xMax
comment15.target=boolean\ checkHorizontalBounds(double,\ double)
comment15.text=\r\n\ Checks\ if\ the\ sprite\ has\ hit\ a\ horizontal\ boundary\r\n\ @param\ xMin\ left-most\ boundary\r\n\ @param\ xMax\ right-most\ boundary\r\n\ @return\ true\ if\ one\ of\ the\ boundaries\ are\ hit\r\n
comment16.params=yMin\ yMax
comment16.target=boolean\ checkVerticalBounds(double,\ double)
comment16.text=\r\n\ Checks\ if\ the\ sprite\ has\ hit\ a\ vertical\ boundary\r\n\ @param\ yMin\ top-most\ boundary\r\n\ @param\ yMax\ bottom-most\ boundary\r\n\ @return\ true\ if\ one\ of\ the\ boundaries\ are\ hit\r\n
comment17.params=other
comment17.target=boolean\ checkCollision(Sprite)
comment17.text=\r\n\ Checks\ whether\ there\ is\ an\ area\ of\ overlap\ with\ another\ Sprite.\r\n\ @param\ other\ The\ other\ sprite\ to\ check\ if\ there\ is\ overlap\ with\r\n\ @return\ true\ if\ there\ is\ some\ area\ of\ intersection\ between\ the\ two\ Sprites\r\n
comment18.params=obstacle
comment18.target=boolean\ checkCollision(Obstacle)
comment18.text=\r\n\ Checks\ whether\ there\ is\ an\ area\ of\ overlap\ with\ another\ Shape\ object.\r\n\ @param\ other\ The\ other\ shape\ object\ to\ check\ if\ there\ is\ overlap\ with\r\n\ @return\ true\ if\ there\ is\ some\ area\ of\ intersection\ between\ the\ two\ Shapes\r\n
comment2.params=
comment2.target=PVector\ getPosition()
comment3.params=p
comment3.target=void\ setPosition(PVector)
comment4.params=s
comment4.target=void\ setVelocity(PVector)
comment5.params=m
comment5.target=void\ setMass(double)
comment6.params=
comment6.target=void\ up()
comment7.params=
comment7.target=void\ down()
comment8.params=
comment8.target=void\ left()
comment9.params=
comment9.target=void\ right()
numComments=19
